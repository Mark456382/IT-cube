import smtplib
from config import *
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from buttons import keyboard, keyboard_2
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, executor


bot = Bot(token=TOKEN)
db = Dispatcher(bot, storage=MemoryStorage())


class Input(StatesGroup):
    sub = State()
    num = State()


@db.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer_sticker('CAACAgIAAxkBAAIdjmPjgbaL09A_MXr_rujJkJTfD5owAALOEQACW-6hS0nvqzvOJ-hjLgQ')
    await message.answer(f"{message.from_user.first_name}, –ü—Ä–∏–≤–µ—Ç!!!(some text)", reply_markup=keyboard)


@db.message_handler(Text('FAQ üëÅ'))
async def faq(message: types.Message):
    await message.answer(FAQ)


@db.message_handler(Text('–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚ùì'))
async def send_email(message: types.Message):
    await Input.sub.set()
    await message.reply("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. "+
                        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –µ—Å—Ç—å. "+
                        "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ FAQ", reply_markup=keyboard_2)


@db.message_handler(state=Input.sub)
async def sub_message(message: types.Message, state: FSMContext):
    if message.text != '–û—Ç–º–µ–Ω–∞ ‚ùå':
        async with state.proxy() as data:
            data['sub'] = message.text
        await Input.num.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é —Å–æ—Ü. —Å–µ—Ç—å, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è", reply_markup=keyboard_2)
    else:
        await state.finish()
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤–∞–º –ø–æ–º–æ—á—å ", reply_markup=keyboard)
        await message.answer_sticker('CAACAgIAAxkBAAIdjGPjgOK7QUf8RMGqOPuu0tMVJBAtAALCFwACpFYJSaadQck7d-CWLgQ')


@db.message_handler(state=Input.num)
async def sub_message(message: types.Message, state: FSMContext):
    if message.text != '–û—Ç–º–µ–Ω–∞ ‚ùå':
        subject = f"–í–æ–ø—Ä–æ—Å –æ—Ç {message.from_user.full_name}"

        async with state.proxy() as data:
            data['num'] = message.text

            msg = f"Subject: {subject}\n –í–æ–ø—Ä–æ—Å:\n{md.bold(data['sub'])}\n–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{md.bold(data['num'])}"

        try:
            smtp = smtplib.SMTP(SERVER, PORT)
            smtp.starttls()
            smtp.login(USER, PASSWD)
            smtp.sendmail(USER, USER, msg.encode('utf-8'))
        except smtplib.SMTPException as err:
            print('–ß—Ç–æ - —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
            raise err
        finally:
            await state.finish()
            await message.answer("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏")
    else:
        await state.finish()
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤–∞–º –ø–æ–º–æ—á—å ", reply_markup=keyboard)
        await message.answer_sticker('CAACAgIAAxkBAAIdjGPjgOK7QUf8RMGqOPuu0tMVJBAtAALCFwACpFYJSaadQck7d-CWLgQ')


# @db.message_handler(Text('–û—Ç–º–µ–Ω–∞ ‚ùå'))
# async def cancel(message: types.Message, state: FSMContext):
#     await state.finish()
#     await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤–∞–º –ø–æ–º–æ—á—å ")
#     await message.answer_sticker('CAACAgIAAxkBAAIdjGPjgOK7QUf8RMGqOPuu0tMVJBAtAALCFwACpFYJSaadQck7d-CWLgQ')


@db.message_handler(Text('–û –Ω–∞—Å ‚òéÔ∏è'))
async def we(message: types.Message):
    await message.answer('–ú—ã –∫–æ–º–∞–Ω–¥–∞ "VektorTeam" –∏ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç "deCryptor" '+
                        '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.'+
                        '–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ–∑–º–æ–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –ø–∞–ø–∫–∏ –∏ –¥–∏—Å–∫–∏ –≤ –ª—é–±–æ–º –æ–±—å–º–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–µ.'+
                        '–°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è base64 –≤ —Å–≤—è–∑–∫–µ —Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n'+
                        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ https://decryptor.vektor.tilda.ws\n–ù–∞—à–∞ –ø–æ—á—Ç–∞: decryptor.vector@gmail.com\n'+
                        '–ú—ã –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö:\nVK: https://vk.com/decryptor.vektor\nTG: https://t.me/decryptor_vektor.com')


@db.message_handler(content_types=['any'])
async def none_message(message: types.Message):
    await message.answer('–£ –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.' +
                        '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É –ª–∏—á–Ω–æ decryptor.vektor@gmail.com –∏–ª–∏ –∂–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ' +
                        '(–∫–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"')


if __name__ == "__main__":
    executor.start_polling(db, skip_updates=False)
